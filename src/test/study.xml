<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	/* 참고 사이트 */
	1. 스프링 프로젝트 만들기
		- https://hongku.tistory.com/115 참고
		- https://all-record.tistory.com/165
	2. 게시판 만들기
		- https://happy-inside.tistory.com/79
	3. MongoDB 설정 및 사용
		- https://cionman.tistory.com/47?category=758474
 -->
 
<!-- 
	/* 스프링 프로젝트 만들기 */
	1. spring mvc project 프로젝트 만들기
		- marketplace에서 sts설치
		- 메이븐을 통해 스프링 mvc에 필요한 디펜던시를 설치
		- 메이븐 프로젝트 생성하면 HomeController가 자동으로 생성
		- @Controller 어노테이션 쓰면 Controller라고 인식
	  
	2. 디스패쳐(Dispatcher)가 뷰(View)를 찾는 방법
		- [servlet-context.xml]
	  	  prefix : view의 경로 
	  	  suffix : view의 확장자
	  
	3. 페이지 화면이 띄워지는 과정
		- web.xml > servlet-mapping > url-pattern을 /로 설정하면 디스패쳐가 가로챔
	      디스패쳐는 controller를 어느 패키지에서 찾아야하는지 모름. 
		  그래서 servlet-context.xml의 context:component-scan에 패키지 알려줌 
	      알려준 패키지에서 @Controller 어노테이션 붙은 파일 찾아서 @RequestMapping을 찾음
	      찾은 @RequestMapping에서  return값으로 view의 이름을 알려줌
	      우리 프로젝트 HomeController.java에 "/" 메소드에 "/index"를 return 해줘서 prefix + /index + suffix 해서 화면 띄운다. 
  
	4. home화면 띄우고 git에 올린다.
		- https://coding-factory.tistory.com/244 참고
		- git 레파지토리 생성하면 명령어 어떻게 입력해야하는지 나옴
		
	5. DB연결
		- https://min-it.tistory.com/5 참고
		- 사용할 데이터베이스의 jdbc maven 디펜던시 추가
		- ORACLE은 jar파일 다운 필요
 -->

<!-- 
	/* aws 서버 만들기 */
	https://brunch.co.kr/@topasvga/17
 -->
 
<!-- 
	/* 2021.03.30 에러 발생 */
	beans:beans Failed to read schema document 'https://www.springframework.org/schema/beans/spring-beans.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
	
	spring 버전과 servlet-context.xml의 xsi:schemaLocation 버전이 달라서 그런것임
	pom.xml의 org.springframework-version 버전을 맞추면 된다.
 -->
 
<!-- 
	/* pom.xml (Project Object Model) */
	프로젝트 내 빌드 옵션을 설정하는 부분
 -->
 
<!--  
	/* 빌드 자동화 도구 */
 	프로젝트 내에 작성한 java코드, xml, properties, jar파일들을 JVM이나 WAS가 인식할 수 있도록 패키징 해주는 과정
 	1. Maven 
 		- https://jeong-pro.tistory.com/168
 		- java용 프로젝트 관리도구, 즉 자바 소스를 compile하고, package해서 deploy하는 일을 자동화 해주는 것.
 		- 빌드중인 프로젝트, 빌드순서, 외부 라이브러리 관계를 pom.xml파일에 명시
 		- 외부저장소에서 라이브러리와 플러그인들을 다운로드 한 다음 로컬시스템의 캐시에 저장
 		- Force Update of Snapshots/Releases 항목은 스냅샷/릴리즈 강제 업데이트
 	2. Gradle
 		- Groovy언어를 사용한 Domain-specific-language를 사용 (xml을 사용하는 maven보다 코드가 훨씬 간결)
 		- 어느 프로젝트의 어느 부분이 업데이트 되었는지 알 수 있음
 		- 업데이트가 이미 반영된 빌드의 부분은 더이상 재실행되지 않음 (빌드시간이 단축) 
 -->
 
 <!--
	/* HTML 무료 템플릿 */
	1. https://templated.co/
	2. https://html5up.net/
 -->
 
<!-- 
	/* Controller에서 return값 차이 */
	https://ooeunz.tistory.com/101 참고
	1. return "home"; -> home.jsp를 실행하라는 의미
	2. return "redirect:/home"; ->RequestMapping에 value가 "home"인 걸 실행하라는 의미
-->
 
 <!-- 
 	/* 페이지 구성 */
	jsp, controller, dao, service로 구성되고, 필요한 경우 vo도 추가한다.
	jsp에서 ajax로 통신하여 controller를 호출한다.
 -->
 
 <!-- 
 	/* myBatis */
 	JDBC를 통해 데이터베이스에 액세스하는 작업을 한다.
 -->
 
 <!-- 
 	/* backend */
 	<인터넷>
	 	1. 인터넷은 어떻게 작동할까?
	 	2. HTTP는 무엇일까?
	 	3. 브라우저와 동작 원리
	 	4. DNS의 작동 원리
	 	5. 도메인 네임은 무엇일까?
	 	6. 호스팅은 무엇일까?
 	
 	<기본적인 프론트엔드 지식>
 		1. HTML
 		2. CSS
 		3. JavaScript
 	
 	<OS및 일반적인 지식>
 		1. 터미널 사용방법
 		2. OS의 일반적인 작동 방식
 		3. 프로세스 관리
 		4. 스레드와 동시성
 		5. 기본적인 터미널 명령어 (grep, awk, sed, lsof, curl, wget, tail, head, less, find, ssh, kill)
 		6. 메모리 관리
 		7. 프로세스간 통신(IPC
 		8. 입출력(I/O)관리
 		9. POSIX 기초 (stdin, stdout, stderr, pipes)
 		10. 기본적인 네트워크 개념
 		
 	<언어 배우기>
 		1. JAVA
 		2. C#
 		3. PHP
 		4. JavaSript
 		5. Python
 		6. Ruby
 		7. Rust
 		8. Go
 		
 	<Git 기본 사용법>
 		1. 버전관리 (무엇일까? 왜 사용할까?)
 		2. 저장소 호스팅 서비스 (계정 생성 및 깃허브 사용방법 배우기)
 	
 	<관계형 데이터베이스>
 		1. PostgreSQL
 		2. MySQL
 		3. MariaDB
 		4. MS SQL
 		6. Oracle
 		
 	<NoSQL 데이터베이스>
 		1. MongoDB
 		
 	<데이터베이스 상세정보>
	 	1. ORM
	 	2. ACID
	 	3. 트랜잭션
	 	4. N+1문제
	 	5. 데이터베이스 정규화
	 	6. 인덱스와 작동 방식
	 	7. 데이터 레플리케이션
	 	8. 샤딩전략
	 	9. CAP이론
	 	
	<API에 대해서 배우기>
		1. REST API
		2. JSON APIs
		3. 인증
			1) OAuth
			2) 기본적인 인증
			3) 토큰 인증
			4) JWT
	
	<캐싱>
		1. CDN
		2. 클라이언트 사이드
		3. Redis
		
	<테스팅>
		1. 통합테스트
		2. 단위테스트
		3. 기능테스트
		
 	
 -->
 
 